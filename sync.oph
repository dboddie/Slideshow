; Copyright (C) 2015 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.alias last_row 255

.alias palette_fe08 $2e00
.alias palette_fe09 $2f00

.org $8000
rom_start:
.byte 0, 0, 0
jmp service_entry

; ROM type
.byte $82       ; 6502 code (2), language ($40), service ($80)

copyright_offset:
.byte [copyright_string - rom_start - 1]

; Version
.byte 1

; Title string
.byte "Palette test", 0

; Version string
.byte "1.0", 0

copyright_string:
.byte "(C) 2015 David Boddie", 0

; Second processor relocation address
.byte 0, $80, 0, 0

service_entry:

    cmp #4
    beq service_command

    service_entry_exit:
    clc
    rts

commands:
.byte <show_name, >show_name

show_name: .byte "SHOW", 13

routines:
.byte <show, >show

service_command:

    tya                         ; push Y and X registers onto the stack
    pha
    txa
    pha

    clc
    tya         ; Store the address of the command line in an new address that
    adc $f2     ; can used zero-based post-indexed addressing.
    sta $74
    lda $f3
    adc #0
    sta $75
    clc

    ldx #0
    service_command_loop:

        lda commands,x
        sta $72
        lda [commands + 1],x
        sta $73

        ldy #0

        service_command_test_loop:

            lda ($72),y
            cmp ($74),y
            bne service_command_next
            iny
            cmp #13
            bne service_command_test_loop

        txa
        lda routines,x
        sta $72
        lda [routines + 1],x
        sta $73

        jmp ($72)

        service_command_next:

        inx
        inx
        cpx #2
        bne service_command_loop

    service_command_not_found:
    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #4                      ; restore A
    rts

show:

    ; Disable the keyboard interrupt.
    lda #178
    ldx #0
    ldy #0
    jsr $fff4

    lda #255                ; Set the length of time to display the picture
    sta $70                 ; with the enhanced palette.

    lda #25
    sta $71

    sei

    lda #$ff
    sta $fe08
    sta $fe09

    main_loop:

    lda #$04                ; 2 c
    bit $fe00               ; 4 c
    beq main_loop           ; 3 c

    lda #$10                ; 2 c
    sta $fe05               ; 4 c
                            ; 15 c

    start:

    ; Set the palette for the first scanline.

    lda palette_fe08        ; 4 c
    sta $fe08               ; 4 c
    lda palette_fe09        ; 4 c
    sta $fe09               ; 4 c
                            ; 16 c

    ldx #52                 ; 2 c
    wait_loop:

        ; Wait for around 64us (128 cycles) per line.

        ldy $71             ; 3 c
        delay0:
            dey             ; 2 c
            bne delay0      ; 3 c
                            ; (25 * 5) + 3 = 128

        nop                 ; 2 c
        nop                 ; 2 c
        dex                 ; 2 c
        bne wait_loop       ; 3 c
                            ; 52 * (128 + 9) + 2 = 7126

    ldx #0                  ; 2 c
                            ; 15 + 16 + 7126 + 2 = 7159 ~= 55.93 scanlines
                            ; with 37 cycles until RAM read = 7196 ~= 56.22 scanlines

    loop:

        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c

        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c

        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c
        nop                 ; 2 c

        cpx #last_row       ; 2 c
        beq end_loop        ; 3 c
        inx                 ; 2 c

        ; Accessing memory at this point should cause the CPU to block.

        lda palette_fe08,x  ; 4 ~c
        sta $fe08           ; 4 c
        lda palette_fe09,x  ; 4 ~c
        sta $fe09           ; 4 c

        jmp loop            ; 3 c
                            ; 56 c

    end_loop:

    lda #$ff                ; blank the palette for the remaining rows
    sta $fe08
    sta $fe09

    dec $70
    bne main_loop

    cli

    ; Restore the palette.
    lda #$73
    sta $fe08
    lda #$f1
    sta $fe09

    ; Reenable the keyboard interrupt.
    lda #178
    ldx #255
    ldy #0
    jsr $fff4

service_command_claimed:

    pla                         ; pop Y and X registers off the stack
    tax
    pla
    tay
    lda #0                      ; claim service command
    rts
